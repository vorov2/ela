open list generic core

conc alg
  | typeCode val == typeCode alg = conc val
  | else = alg
  where val = consParamValue 0 alg



instance Seq where
  head !alg
    | pars == 1 =
        let val = consParamValue 0 alg in
        let ret
              | typeCode val == typeCode alg = default
              | else = alg
        in ret
    | pars == 2 = 
        let par1 = consParamValue 0 alg in
        let par2 = consParamValue 1 alg in
        let val
              | par1 == default = par1
              | else = par2
        in val
    | else = &fail "Unable to obtain head."
    where pars = consParamNumber alg
  tail !alg
    | pars == 1 =
        let val = consParamValue 0 alg in
        let ret
              | typeCode val == typeCode alg = val
              | else = default
        in ret
    | pars == 2 = 
        let par1 = consParamValue 0 alg in
        let par2 = consParamValue 1 alg in
        let val
              | par1 == default = par2 
              | else = par1
        in val
    | else = &fail "Unable to obtain tail."
    where pars = consParamNumber alg
  isnil !alg = alg == default

//Classes
class Monoid a where
  mempty a
  mappend a->a->_
  mconcat a->_

instance Monoid where
  mconcat !xss = foldr mappend mempty $ xss

//Types and instances
type Endo = EmptyEndo | Endo appEndo
  deriving Eq Show Name Seq Default

instance Monoid Endo where
  mempty = default
  Endo f `mappend` Endo g = Any (f << g)
  //mconcat = conc

type Any = EmptyAny | Any getAny
  deriving Eq Show Name Seq Default

instance Monoid Any where
  mempty = default
  Any x `mappend` Any y = Any (x || y)
  //mconcat = conc

type All = EmptyAll | All getAll
  deriving Eq Show Name Seq Default

instance Monoid All where
  mempty = default
  Any x `mappend` All y = All (x && y)
  //mconcat = conc

type Sum = EmptySum | Sum getSum
  deriving Eq Show Name Seq Default

instance Monoid Sum where
  mempty = EmptySum
  mappend EmptySum y = y
  mappend x EmptySum = x
  mappend (Sum x) (Sum y) = Sum (x + y)
  //mconcat = conc

type Product = EmptyProduct | Product getProduct
  deriving Eq Show Name Seq Default

instance Monoid Product where
  mempty = default
  mappend (Product x) (Product y) = Product (x * y)
  //mconcat = conc


mconcat $ Sum (Sum 5)




instance Monoid List where
  mempty = []
  mappend = (++)
  mconcat xss = [x \\ xs <- xss, x <- xs]

instance Monoid Maybe where
  mempty = None
  None `mappend` m = m
  m `mappend` None = m
  Some m1 `mappend` Some m2 = Some (m1 `mappend` m2)


