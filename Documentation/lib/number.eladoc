#file number.ela
#title number
#category Ela Standard Library
This module contains major numeric classes and instances. 

=Classes

#Num
Defines polymorphic constancs `zero` and `one`, which should evaluate to respective
numbers.//br
Instances of this class are provided for all standard numeric types.

#Numeral
Defines a single function `numeral` which is used in conjunction with numeric literal
function `literal'u` to support a concept of polymorphic numeric literals. In order to
support polymorphic numeric literal a numeric type should provide an implementation of
`numeral` function which accepts a single string parameter and returns a number instance.
For example, this is how this class can be implemented for `Int`:
>>instance Numeral Int where
>>  numeral = read
Instances of this class are provided for all standard numeric types.

#Float
Defines functions `inf` (tests if a given float is a positive or negative infinity),
`posInf` (tests if a given float is a positive infinity), `negInf` (tests if a given
float is a negative infinity) and `nan` (tests if a given float is not a number).//br
>>>nan 12.2
Instances of this class should be provided by all floating point numbers.//br
This module provides instances of `Float` class for types `Single` and `Double`.

#Fractional
Defines functions `round` (rounds a number to a nearest integer), `truncate`
(calculates the integral part of a specified number), `floor` (returns the largest integer 
less than or equal to the specified number) and `ceiling` (returns the smallest integer 
greater than or equal to the specified number).
>>>ceiling 12.01
Instances of this class should be provided by all fractional numbers.//br
This module provides instances of `Fractional` class for types `Single` and `Double`.

#Integral
Defines two integer division functions - `quot`, which is an integer division, truncated
towards zero, and `div`, which is an integer division, truncated towards negative
infinity.
>>>-5 `div` 2
This module provides instances of `Integral` class for types `Int` and `Long`.//br
Minimum implementation: `quot` function.

#Absolute
Defines functions for the types with a notion of an absolute value. Function `abs` returns
an absolute value of a given value, and function `signum` returns a sign of a given value.
>>>signum -2
This module provides instances of `Absolute` class for types `Int`, `Long`, `Single` and `Double`.
Also this module provides a complete default implementation of this class that would work for
types that implement `Additive`, `Ord` and `Num`.

#Transcendental
Represents a class for numbers supporting elementary transcendental functions.//br
This module provides instances of `Transcendental` class for types `Single` and `Double`.

#Principal
A principal ideal domain is a ring in which every ideal, the set of multiples of some generating
set of elements, is principal. This class defines functions `gcd` (greatest common divisor for 
the two given arguments) and `lcm` (the least common multiple of two given arguments).//br
This module provides instances of `Principal` class for types `Int`, `Long`, `Single` and `Double`.
Also this module provides a complete default implementation of this class that would for for types
that implement `Eq`, `Num`, `Modulo`, `Absolute` and `Ring`.

=Default instances

===Integral
This partial default instance provides implementation for `div` function:
>>div x y
>>  | r < 0u && r*y <> x = r - 1u
>>  | else = r
>>  where r = x `quot` y
This default instance can be used for types that implement `Ord`, `Additive`, `Ring` and `Num`.

===Absolute
This complete instance provides implementation for all functions defined in `Absolute` class:
>>abs x 
>>  | signum x == 1u = x 
>>  | else = negate x
>>signum x 
>>  | x < 0u = negate 1u
>>  | else = 1u
This default instance can be used for types that implement `Eq`, `Ord`, `Additive` and `Num`.

===Principal
This complete instance provides implementation for all functions defined in `Principal` class:
>>gcd !x y
>>  | x == 0u && y == 0u = fail "..."
>>  | else = gcd' (abs x) (abs y)
>>  where gcd' x y
>>          | y == 0u = x
>>          | else = gcd' y (x % y)
>>lcm !x y 
>>  | x == 0u || y == 0u = 0u
>>  | else = abs ((x `quot` gcd x y) * y)
This default instance can be used for types that implement `Eq`, `Ring`, `Additive`, `Modulo`, `Absolute` and `Num`.

===Transcendental
This partial default instance contains definitions of functions `logBase`, `tan`
and `tanh`:
>>logBase x y = log y / log x
>>tan x       = sin x / cos x
>>tanh x      = sinh x / cosh x
There are no specific requirements to use this default instance for new types.

===Numeral
This complete instance provides implementation for function `numeral` defined in `Numeral` class:
>>numeral = read
This default instance can be used for types that implement `Read` class.

=Functions

#literal'u s
This function is used for the polymorphic numeric literals:
>>12u
