#file monad.ela
#title monad
#category Ela Standard Library
This module contains implementations of some monadic classes, common instances for these classes and useful
generic functions.

=Classes

==Functor

#Functor
`Functor` is a class that defines a single `fmap` function. An `fmap` function is a generalized version of `map`,
which is provided for a linked list in `prelude` modules. Therefore an instance of a `Functor` class for a list
is simply written like so:
>>instance Functor List where
>>  fmap = map
Once defined an instance like the one above we can be sure that `fmap` behavior for a linked list is exactly the
same as behavior of a regular `map` function:
>>>fmap (*2) [1..5]
and
>>>map (*2) [1..5]
You can, of course, define instances for other types that can be mapped over. All instances of `Functor` should
satisfy the following law:
>>fmap id == id
>>fmap (f << g) == fmap f << fmap g
This module defines instances of `Functor` for types `Fun`, `List`, `Maybe`, `Either`, `Or` and for a `Tuple`. 
This module also provides a generic default instance of `Functor`.

==Union

#Union
`Union` class defines a single `join` function. This class can be seen as a generalization of a `concat` function
on lists. Therefore an instance of `Union` class for a list can be defined like so:
>>instance Union List where
>>  join = list.concat
A instance of `Union` class can be provided for all types that can act as a container of containers; it takes a
container of containers and turns it into a single container. A simple example for this is a `Maybe` type:
>>>join <| Some (Some 12)
This module defines instances of `Union` for types `List`, `Maybe`, `Either` and `Tuple`. This module also 
provides a generic default instance of `Union`.

==Pointed

#Pointed
A `Pointed` class defines a single `point` function. This function is similar in behavior to `return` function
from `Monad` class in Haskell. It takes a single argument and injects it into a monadic type. This function is
overloaded by its return value:
>>>point 42 ::: List
Instances of `Pointed` for most of the type are very straightforward as soon as they do nothing more that a type
constructor. For example, an instance of `Pointed` for a `Maybe` type can be implemented like so:
>>instance Pointed Maybe where
>>  point = Some
This modules defines instance of `Pointed` for types `List`, `Maybe`, `Either` and `Tuple`. This module also
provides a generic default instance of `Pointed`.

==Copointed

#Copointed
A `Copointed` class is an opposite to `Pointed`. It defines a single `extract` function that takes a monadic type 
and extracts a value from it:
>>>extract [42]
This modules defines instance of `Copointed` for types `List`, `Maybe`, `Either` and `Tuple`. This module also
provides a generic default instance of `Copointed`.

==Failure

#Failure
A `Failure` class defines a function `failure` and can be used for those types that have a notion of failure.
This module defines instances of `Functor` for types `List`, `Maybe`, `Either`, `Or` and for a `Tuple`. This module
also provides a generic default instance of `Functor`. A default generic instance of `Failure` is implemented like so:
>>instance Failure where
>>  failure = undefined

=Functions

==Core monadic operators

The two operators `>>=` and `>>-`, listed in this section, are used by Ela compiler when desugaring a do-notation. One
can change an implementation of these operators in any way he or she likes - a compiler would use the operators available 
in the current scope.//br
By default in order to use do-notation one should reference `monad` module.

#>>=
A "bind" function that sequentially compose two actions, passing any value produces by the first as an argument to the
second. This function is defined in terms of `fmap` and `join`:
>>xs >>= f = join (fmap f xs)

#>>-
Sequentially compose two actions, discarding any value produced by the first, like sequencing operators (such as the semicolon) 
in imperative languages. This function is define through `>>=` like so:
>>xs >>- ys = xs >>= (\_ -> ys)


==Basic monadic functions

#<$ v cont
This function is not a part of `Functor` definition but can be defined in terms of `fmap` like so:
>>(<$) = fmap << const
This function replaces all locations in the with the same value like so:
>>>2 <$ [1..5]

#$> cont v
This is a flipped version of `(<$)`.

#<$>
This is an infix synonym for `fmap`.

#return
The `return` function is an alias for `point` and is defined like so:
>>return = point

#=<<
Same as `(>>=)` but with the arguments intercharged.

#>=>
Left-to-right Kleisli composition of monads.

#<=<
A flipped version of `(>=>)` function.

#mapM f
Map each element of a structure to a monadic action, evaluate these actions from left to right, and collect the results.

#mapM_ f
Map each element of a structure to a monadic action, evaluate these actions from left to right, and ignore the results.

#forM f
This function is `mapM` with its arguments flipped.

#forM_ f
This function is `mapM_` with its arguments flipped.

#sequence d
Evaluate each monadic action in the structure from left to right, and collect the results.
For a version that ignores the results see `sequence_`.

#sequence_ d
Evaluate each monadic action in the structure from left to right, and ignore the results.

#forever act
Takes an action `act` and executes it infinitely, e.g.:
>>open monad io
>>forever (putStrLn "Hello!")

#void
Discards the result of evaluation, such as the return value of an IO action.

==Generalization of list functions

#mfilter
A direct equivalent of `filter` function:
>>>mfilter odd (Some 1)
>>>mfilter odd (Some 2)

#filterM
Generalizes the list-based `filter` function.

#mapAndUnzipM
This function maps its first argument over a list, returning
the result as a pair of lists. This function is mainly used with complicated
data structures or a state-transforming monad.

#zipWithM
Generalizes `zipWith`.

#zipWithM_
Generalizes `zipWith` function (discards the results).

#foldM
Monadic fold over the elements of a structure, associating to the left, i.e. from left to right.

#foldM_
Acts like `foldM` but discards the result.

#replicateM n act
Performs an actions `act` `n` times, gathering the results.

#replicateM_ n act
Performs an actions `act` `n` times and discards the result.


==Conditional execution
#guard
A boolean guard function that can be used in monadic expressions, specifically in `do` notation. This function is
defined as follows:
>>guard true = return ()
>>guard false = default
It should be called in a context of a type that provides instances for class `Default` (defined in Prelude) and 
`Pointed` (defined in this module, `return` is just an alias for function `point`).//br
For example, this code filters out all events from a given list (using `do` notation):
>>>open monad
>>>
>>>evens xs = do
>>>  x <- xs
>>>  guard (even x)
>>>  return x
>>>
>>>evens [1..10] ::: List

#when
Conditional execution of expressions. For example:
>>do
>>  when debug (putStrLn "Debugging")
will output the string `"Debugging"` if the boolean value `debug` is `true`, and otherwise do nothing.

#unless
The reverse of `when`.

==Monadic lifting operators
#liftM f m1
Promote a function to a monad.

#liftM2 f m1 m2
Promote a function to a monad, scanning the monadic arguments from left to right.

#liftM3 f m1 m2 m3
The same as `liftM2`, but for three monadic arguments.

#liftM4 f m1 m2 m3 m4
The same as `liftM2`, but for four monadic arguments.

#liftM5 f m1 m2 m3 m4 m5
The same as `liftM2`, but for five monadic arguments.

#ap m1 m2
In many situations, the `liftM` operations can be replaced by uses of `ap`, which promotes function application.
>>return f `ap` x1 `ap` ... `ap` xn
is equivalent to
>>liftMn f x1 x2 ... xn
