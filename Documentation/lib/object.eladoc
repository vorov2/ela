#file object.ela
#title object
#category Ela Standard Library
This module contains implementations of prototype based OOP (through delegation) in Ela.

=Type object
An object oriented entity is presented in Ela using special type `Object`. Unlike other standard types `Object` is
not exposed directly from the module of the same name and all operations with objects are performed using regular
functions. For example, in order to create an instance of an object one should write:
>>object.new {x = 1, y = 2}
A function `new` constructs a new object from a given record literal.//br
Prototype based OOP allows to use prototypes for objects (which can be seen as an alternative to inheritance in 
class based OOP). In order to create an instance of an object with a given prototype one should write:
>>prototype = object.new { x = 1, y = 2 }
>>obj = object.from(prototype) { z = 3}
You can than access fields from both object itself and it's prototype using regular syntax:
>>obj.x //Return 1
>>obj.z //Return 3
Another handy feature is an ability to switch the prototype of a given object an runtime. One can do that like so:
>>prototype1 = object.new { xx = 1, yy = 2 }
>>obj1 = object.rebase(prototype1) obj
Rebasing creates a new instance of an object.//br
All instances of type `Object` support the following type classes: `Read`, `Name`, `Len`, `Show`, `Eq` and `RecordLike`.

=Functions

==Construction functions

#new rec
This function creates a new object using a given record instance `rec`.
>>obj = object.new {x = 1, y = 2}
This function requires a qualified access.

#from proto rec
This function creates a new object using a given prototype `proto`:
>>prototype = object.new { x = 1, y = 2 }
>>obj = object.from(prototype) { z = 3}
This function requires a qualified access.

#rebase proto rec
This functions changes a prototype of a given object `rec` to a new prototype `proto`:
>>prototype1 = object.new { xx = 1, yy = 2 }
>>obj1 = object.rebase(prototype1) obj
This function requires a qualified access.

==Reflection functions

#base rec
Returns `Maybe.Some` with an instance of a prototype of a given object `rec` if a prototype is present, otherwise - `Maybe.None`. This function requires a qualified access.

#isBase proto rec
Returns `true` if a given object `proto` is a prototype for a given object `rec`, otherwise - `false`. This function requires a qualified access.

#hasBase rec
Returns `true` if a given object `rec` has a prototype, otherwise - `false`. This function requires a qualified access.

==Field manipulations

Field manipulation functions are similar to those which are implemented in `record` module.

#fields rec
Returns a list of all fields from an object `rec`, including fields of its prototype. This function requires a qualified access.

#field fld rec
Returns `true` if a field `fld` is present in object `rec` (or its prototype), otherwise - `false`. This function requires a qualified access.

#changeField fld val rec
Changes a value of a field `fld` to `val` in an object `rec` (or in its prototype).

#addField fld val rec
Adds a field `fld` with value `val` to an object `rec`.

#addFields fields rec
Adds fields from record `fields` to an object `rec`.


