#title What's new? (Ela Platform 2016.6)

=Overview
This release focuses on a redesign of exception handling in Ela. It also comes with an update
to Ela standard library and documentation.

=Ela changes
==Deprecation of try/with construct
Starting from Ela 0.15 `try/with` construct is deprecated. You can still use it in your code, but Ela compiler would
generate a warning. However, you can still use `fail` function to raise errors. Also a new error handling strategy is
introduced with this release of Ela and Ela standard library.
==Handling errors
Raising an error with `fail` function would cause a program to terminate immediately, unless you use a deprecated
`try/with` construct. However, as long as Ela support non-strict execution, one can use a deferred failure strategy
by explicitly marking the `fail` function as lazy:
>>&fail "Unexpected error."
In this case an error would be raised only if you try to operate with the value returned by `fail` function. For example,
the following code wouldn't raise an error:
>>x = &fail "Unexpected error."
However, the following code would terminate a program with an exception:
>>x = &fail "Unexpected error."
>>y = x * 2
Sometimes you might need to check if an applied function was a success or a failure (e.g. returned a deferred "fail" like
shown in a previous section). In order to that you can use `isError` function, defined in a standard prelude like so:
>>>_ /. 0 = &fail "Division by zero."
>>>x /. y = x / y
>>>
>>>res = 12 /. 0
>>>
>>>isError res
In the example above an error is not raised and `isError` function returns `true`.//br
You can use a deferred `fail` in conjunction with `inError` function as a functional replacement for structured exception handling from
imperative languages.
==Suppress warnings
Ela 0.15 comes with a new binding attribute `nowarnings`. When specified it suppresses all warnings that otherwise would be
generated by a function. For example:
>>error # nowarnings
>>error obj =
>>  try force obj with
>>    str = str
This function won't generate a warning about `try/with` construct beign obsolete.
==Operator symbols
Now Ela allows to use `(,)`, `(;)` and `(#)` as operator symbols.//br
If an operator starts with a `(,)` it has one of the lowest priorities (the same as `($)`)
among other operators and left associativity.//br
If an operator starts with a `(;)` it has the same priority as `(,)` and left associativity.//br
If an operator starts with a `(#)` it has the same priority as `(@)` and right associativity.

=Ela library changes
All modules in Ela library are updated to use new error handling strategy. Also library contains minor bug fixes.

=Documentation changes
Documentation in this release is updated according to the language changes. Also documentation now including additional
code samples such as _Caeasar_ _cypher_, _RPN_ _Calculator_, _ABC_ _Blocks_ and _Langton's_ _Ant_. A _Prototype_ code
sample is now decomissioned (one can take at complete implementation of prototype based OOP in `object` module). Additionally
code samples directory is reorganized.
