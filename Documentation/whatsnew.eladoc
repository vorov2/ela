#title What's new? (Ela Platform 2015.3)

=Overview
The major feature of Ela Platform 2015.3 is an addition of an arbitrary precision integer type through a separate
`integer` module. Also Ela now goes from .NET 2.0 to .NET 4.0 (and Mono 2.8 respectively). Besides this Ela Platform
2015.3 includes several enhancements to Ela standard library.

=Ela changes
The only change to Ela in this platform release is compilation of Ela code to .NET 4.0 instead of .NET 2.0.

=Ela Console changes
Ela Console now (as well as Ela and other platform components) compiles to .NET 4.0.

=Documentation
Documentation is updated with an article about new `integer` module. Also articles about `prelude` and `number` are
updated according to the module changes.

=Library changes
Ela standard library contains a new module `integer` that implements an arbitrary precision integer and several changes to
already existing modules. Also the .NET part of the library is not compiled to .NET 4.0 (instead of .NET 2.0) as it used
to be in a previous version).
==New integer module
A new integer module implements an arbitrary precision integer (data type `Integer`). In the current implementation a .NET
Framework `System.Numerics.BigInteger` class is used in the back-end. Module `Integer` provides instances for the following classes:
  * Standard prelude: `Default`, `Eq`, `Ord`, `Enum`, `Show`, `Read`, `Additive`, `Ring`, `Modulo`, `Field`, `IntLike`, `LongLike`
  * Module `string`: `Format`
  * Module `number`: `Num`, `Integeral`, `Absolute`, `Principal`
  * Module `integera`: `IntegerLike`
Additionally it defines a class `IntegerLike` and provides instances of it for `Int`, `Long` and itself.
==Changes to existing modules
This release includes the following changes to existing modules:
  * Standard prelude now provides a partial default implementation for `Enum` class (function `enumFrom` and `enumFromTo`), which simplifies implementation of ranges for custom numeric types.
  * Module `number` now provides a complete default implementation of `Absolute` class (works for types that implement `Additive`, `Ord` and `Num`).
  * Module `number` now provides a partial implementation of `Integral` class (`div` function, works for types that implement `Ord`, `Additive`, `Ring` and `Num`).
  * Module `number` now provides a complete default implementation of `Principal` class (works for types that implement `Eq`, `Num`, `Modulo`, `Absolute` and `Ring`).