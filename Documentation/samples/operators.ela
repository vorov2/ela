//Here we use console output for testing purposes.
//Module 'io' implements console output using IO monad.
open monad io number
::: IO //Input is a default context for all do-blocks used in this module.

//Ela has all the basic arithmetic operators
_ = do putStrLn <| show (2 + 2)
_ = do putStrLn <| show (2 * 4 - 3)
_ = do putStrLn <| show (12 / 3) //This is real division, it is not truncated

//Functions in Ela are curried and are called without braces
//Here we calculate the length of a list (from 1 to 10) by
//calling standard length function
len = length [1..10]

//Unlike many imperative languages Ela doesn't guarantee an order in which
//function arguments are evaluated. If you require a strict order (e.g. you
//want to write imperative code) you should use do-notation:
_ = do
  putStrLn "First"
  putStrLn "Second"
  putStrLn "Third"


//Functions can also be called using pipe operators. Sometimes it makes code more
//visual.
x = 12 |> (+2) |> (*2)
y = (*2) <| (+2) <| 12

_ = do putStrLn <| "x=" ++ show x
_ = do putStrLn <| "y=" ++ show y


//Ela also has forward and backward function composition operators
//This is also a good example of partial operator application using left/right sections.
fun1 = ("Backward composition: "++) << show << (*3)
fun2 = (*3) >> show >> ("Forward composition: "++)
_ = do putStrLn (fun1 x)
_ = do putStrLn (fun2 x)

//By the way all Ela operators are written in Ela, you can always define your own
//operators if you don't like any of these.
f <~> x = f x //We want to call functions using weird <~> operator
_ = do putStrLn <~> "It works!"
