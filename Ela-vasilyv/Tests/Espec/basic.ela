open espec
open number core tuple record list char string

test1 = 
  test "Primitives equality"
  given 2
    when (+) 20
    should be 22
    should lesser 24
  given 12
    should be 12
    shouldn't be 33
  given 14
    when (-) 4
    should be 10
  given true
    should be true
    shouldn't be false
    when not
    shouldn't be true
    should be false
  given "first"
    should be "first"
    shouldn't be "second"
  given 'f'
    should be 'f'
    shouldn't be 'F'
  given (1,2)
    should be (1,2)
    shouldn't be (2,3)

test2 = 
  test "Primitives compare"
  given 12.3
    when (-) 12.3
    should lesser .001
    shouldn't be .001
  given 24
    should greater 12
  given 125L
    should greater 124
    should greater 124L
    shouldn't greater 125L
  given 123.23
    should lesser 150.0
  given 12
    should greaterEqual 12
    should lesserEqual 12
  given 45
    should lesserEqual 46
    should lesserEqual 45
  given "ABC"
    shouldn't greater "ABC"
    should lesser "abc"
  given "efg"
    should greater "EFG"
    shouldn't greater "efg"
  given 'a'
    should greater 'A'
    shouldn't greater 'a'
  given 12
    when compare 12
    should be EQ
  given "abc"
    when compare "ABC"
    should be GT

test3 = 
  test "Type conversions"
  given 65
    when toInt
    should be 65
    when toLong
    should be 65L
    when toInt
    should be 65
    when toChar
    should be 'A'
    when toString
    should be "A"
    after getValue 0
    should be 'A'
    when toInt
    should be 65
    when toBool
    should be true
  given 12.2
    when toSingle
    should be 12.2f
    when toDouble
    should greater 12.19d
    when toLong
    should be 12L
  given (1,2,3)
    when toList
    should be [1,2,3]

test4 =
  test "Simple math"
  given 2
    when (+) 2
    should be 4
    when (-) 2
    should be 2
  given 23
    when (+) 112
    should be 135
    when (-) 133
    should be 2
    when (*) 2
    should be 4
  given 25
    when (%) 2
    should be 1
  given 24
    when (%) 2
    should be 0
  given 3
    when (**) 2
    should be 9
    when negate
    should be -9
  given 0
    when (-) 256
    should be (negate 256)
    when (+) 256
    when (-) 45L
    should be (negate 45L)
    when (+) 45L
    when (-) 42
    should be (negate 42)
  given 16
    when (/) 2
    should be 8
    when (/) 3
    should greater 2.6
  given 1.25
    when (/) .25
    should be 5
  given 1.5d
    when (/) 1d
    should be 1.5

test5 =
  test "Concatenation"
  given "1"
    when (++) "&"
    when (++) "2"
    should be "1&2"
  given 'A'
    when (++) 'B'
    when (++) 'C'
    should be "ABC"
  given '1'
    when (++) '2'
    should be "12"
  given "abc"
    when (++) 'd'
    should be "abcd"
  given '0'
    when (++) "123"
    should be "0123"

test6 = 
  test "Logical negation"
  given 2
    when (<>) 2
    when not
    should be true
  given 2
    when (==) 2
    when not
    should be false
  given "First"
    when (==) "first"
    when not
    should be true
  given 'A'
    when (==) 'a'
    when not
    should be true

test7 =
  test "Function composition"
  given 2
    when comp1
    should be 6
  given 2
    when comp2
    should be 6
  where fun1 x = x+2
        fun2 x = x*2
        fun3 x = x - 2
        comp1 = fun1 >> fun2 >> fun3
        comp2 = fun3 << fun2 << fun1

test8 = 
  test "Bit operations"
  given 12
    when (<<<) 8
    when (|||) 2
    should be 3074
    when (&&&) 255
    should be 2
  given 12
    when (<<<) 8
    when (|||) 2
    when (>>>) 8
    should be 12
  given 2
    when (~~~)
    should be -3
  given 124
    when (~~~)
    should be -125
  given -3
    when (~~~)
    should be 2

test9 =
  test "Successor and predecessor"
  given 1
    when succ
    should be 2
    when succ
    should be 3
    when pred
    should be 2
  given 1L
    when succ
    should be 2L
    when succ
    should be 3L
    when pred
    should be 2L
  given (1,2)
    when succ
    should be (2,3)
    when pred
    should be (1,2)
  given (1,2,3,4)
    when succ
    should be (2,3,4,5)
    when pred
    should be (1,2,3,4)
  given 'a'
    when succ
    should be 'b'
    when succ
    should be 'c'
    when pred
    should be 'b'
    when pred
    should be 'a'

test10 = 
  test "Implicit number conversions"
  given 2
    should be 2.0d
    should be 2.0f
    when (-) 1.5
    should be 0.5
    should greater 0.3
    shouldn't greater 0.5
    should lesser 0.6
  given 10
    when (/) 4
    should be 2.5
  given 2L
    should be 2
    should greater 1
    shouldn't greater 3
    should greater 1.5
    should lesser 2.5

test11 = 
  test "Integral"
  given 5
    when (/) 2
    should be 2.5
  given 5
    when div 2
    should be 2
  given 5
    when quot 2
    should be 2
  given 5
    when negate
    when quot 2
    should be -2
  given 5
    when negate
    when div 2
    should be -3

test12 = 
  test "Fractional"
  given 12.6
    when round
    should be 13
  given 12.6
    when floor
    should be 12
  given 12.6
    when ceiling
    should be 13
  given 12.6
    when truncate
    should be 12

test13 = 
  test "Show primitives"
  given 12
    when show
    should be "12"
  given 12.2
    when show
    should be "12.2f"
  given true
    when show
    should be "true"
  given false
    when show
    should be "false"
  given (1,2)
    when show
    should be "(1,2)"
  given (1,)
    when show
    should be "(1,)"
  given {x=1,y=2}
    when show
    should be "{x=1,y=2}"
  given ()
    when show
    should be "()"

test14 = 
  test "Strings"
  given "Ela"
    when length
    should be 3
  given "Elide"
    when head
    should be 'E'
    when (++) "la"
    should be "Ela"
  given "Platform"
    after getValue 2
    should be 'a'
  given "String"
    should greater "STring"
    should lesser "string"
    should greaterEqual "String"
    should lesserEqual "string"
    when toString
    should be "String"
  given "some"
    when (++) "string"
    should be "somestring"
  given "ela"
    when toList
    should be ['e','l','a']

test15 = 
  test "Tuples"
  given ('E', 'l', 'a')
    when length
    should be 3
  given (1,2)
    after getValue 0
    should be 1
  given (12,42)
    after getValue 1
    should be 42
  given (1,2)
    when swap
    should be (2,1)
    when swap
    should be (1,2)
  given (1,2,3)
    when swap3
    should be (2,1,3)
    when swap3
    should be (1,2,3)
  given 1
    when (=>) 2
    should be (1,2)
  given ('a','b')
    when fst
    should be 'a'
  given ('c','d')
    when snd
    should be 'd'
  given (1,2,3)
    when fst3
    should be 1
  given (4,5,6)
    when snd3
    should be 5
  given ("Ela",)
    should be ("Ela",)
    after getValue 0
    should be "Ela"
  given (1,2)
    should be (1,2)
    shouldn't be (3,4)
    should greater (0,1)
    should lesser (3,4)
    should greaterEqual (0,2)
    should lesserEqual (1,3)
  given ("Foo","Bar")
    should be ("Foo","Bar")
    shouldn't be ("Foo","bar")
    should lesser ("foo","bar")
    shouldn't greater ("Foo","Bar")
    should greater ("FOO","Bar")
    should greaterEqual ("Foo","BAR")
    should lesserEqual ("Foo","Bar")
    should lesserEqual ("Foo","bar")
  given (10,20)
    should be (10.0,20.0)
    should greater (7.87,10)
  given (1,2)
    when (++) (3,4)
    should be (1,2,3,4)
  given (3,4)
    when (++) (1,2)
    should be (3,4,1,2)
  given (1,2)
    when (+) (2,3)
    should be (3,5)
    when (*) (2,3)
    should be (6,15)
    when (-) (3,10)
    should be (3,5)
    when (/) (2,2.5)
    should be (1.5,2)
  given (1,)
    when (+) (2,)
    should be (3,)
  given (1,2,3,4)
    when (+) (10,20,30,40)
    should be (11,22,33,44)
    when (-) (10,20,30,40)
    should be (1,2,3,4)
    when negate
    should be (-1,-2,-3,-4)
  given (1,2,3)
    when toList
    should be [1,2,3]
  given 2
    when dup
    should be (2,2)

test16 =
  test "Records"
  given {lang="Ela",dev="Basil"}
    after getField "lang"
    should be "Ela"
  given {x=1,y=2}
    after isField "x"
    should be true
  given {x=1,y=2,z=3}
    when length
    should be 3
  given {"font-color"="red"}
    after getField "font-color"
    should be "red"
  given {"text-decoration"="none"}
    after isField "text-decoration"
    should be true
  given {x=1,y=2}
    after getValue 0
    should be 1
  given {x=1}
    when (++) {y=2}
    should be {x=1,y=2}
    when (++) {z=3}
    should be {x=1,y=2,z=3}
    shouldn't be {x'=1,y=2,z=3}
    shouldn't be {x=1,y=2,z=3.1}
  given {x=1,y=2}
    when fields
    should be ["x","y"]

test17 = 
  test "Lists"
  given ['E','l','a']
    after getValue 2
    should be 'a'
  given [1,2,3]
    when length
    should be 3
  given [1,2,3]
    should be (1::2::3::[])
  given [0,1,2,3]
    when tail
    should be [1,2,3]
    when tail
    should be [2,3]
    when head
    should be 2
  given [1,2,3]
    when zip ['a','b','c']
    should be [(1,'a'),(2,'b'),(3,'c')]
  given [5,3,2,6,2,7,2,5,4,6,6]
    when zip ["im","a","turtle"] 
    should be [(5,"im"),(3,"a"),(2,"turtle")]
    when length
    should be 3
  given [1,2,3]
    when reverse
    shouldn't be [1,2,3]
    should be [3,2,1]
    should greater [2,2,1]
    should greater [3,1,1]
    should lesser [3,3,1]
    should greaterEqual [3,2,1]
    should lesserEqual [3,2,1]
    should lesserEqual [3,2,2]
    when reverse
    should be [1,2,3]
    after take 2
    should be [1,2]
    after take 1
    should be [1]
    when (++) [1,2,3]
    should be [1,1,2,3]
    after skip 1
    should be [1,2,3]
  given [1..10]
    after take 8
    should be [1..8]
    after skip 5
    should be [6,7,8]
    when tail
    should be [7,8]
    when sum
    should be 15
  given [2,3]
    when product
    should be 6
  given [1]
    when (++) [2]
    should be [1,2]
    when (++) [3]
    should be [1,2,3]
    after map odd
    should be [true,false,true]
    after filter id
    should be [true,true]
  given 1
    when (::) [2]
    should be [1,2]
  given [1,2,3]
    when init
    should be [1,2]
    when last
    should be 2
  given [1..]
    after filter' odd
    after take 10
    should be [1,3,5,7,9,11,13,15,17,19]
    after filter even
    should be []
  given (& [1..5])
    after filter' (>2)
    should be [3,4,5]
  given [1,2,3]
    when (++) [4..]
    after take 4
    should be [1,2,3,4]
  given [1..]
    after map' (+1)
    after take 5
    should be [2,3,4,5,6]

test18 = 
  test "Maybe"
  given 12
    when Some
    shouldn't be None
    should be (Some 12)
    after (maybe 0 even)
    should be true
  given (Some 42)
    when fromSome
    should be 42
  given None
    should be None
    shouldn't be (Some 12)
    after (maybe 0 id)
    should be 0
  given (Some 42)
    after fromMaybe 0
    should be 42
  given None
    after fromMaybe 0
    should be 0
  given None
    when isNone
    should be true
  given [Some 12,None,Some 24]
    when catMaybes
    should be [12,24]
  given [1..5]
    after mapMaybe (\x -> if even x then Some x else None)
    should be [2,4]

test19 = 
  test "Either"
  given 12
    when Left
    should be (Left 12)
    when isLeft
    should be true
  given "foo"
    when Right
    should be (Right "foo")
    when isRight
    should be true
  given (Left 42)
    when (either even odd)
    should be true
  given (Right 42)
    when (either even odd)
    should be false
  given (Left "foo")
    when fromLeft
    should be "foo"
  given (Right "bar")
    when fromRight
    should be "bar"
  given [Left 1,Left 2,Left 3]
    when lefts
    should be [1,2,3]
  given [Right 1,Right 2,Right 3]
    when rights
    should be [1,2,3]
  given [Left 1,Right 2,Left 3,Right 4]
    when partitionEithers
    should be ([1,3],[2,4])

test20 = 
  test "Ordering"
  given EQ
    when toInt
    should be 0
  given LT
    when toInt
    should be 1
  given GT
    when toInt
    should be 2
  given LT
    should be (fromInt 1 ::: Ordering)
  given [EQ..GT]
    should be [EQ,LT,GT]
  given EQ
    when show
    should be "EQ"
  given EQ
    when compare LT
    should be LT
  given GT
    when compare EQ
    should be GT
  given LT
    when compare LT
    should be EQ
  given EQ
    when succ
    should be LT
    when succ
    should be GT
    when pred
    should be LT
    when pred
    should be EQ

test21 =
  test "StringBuilder"
  given "first"
    when (+>) ","
    when (+>) "second"
    when toString
    should be "first,second"
  given "a"
    when (+>) "b"
    should be ("a" +> "b")
    shouldn't be ("a" +> "B")
  given "A"
    when (+>) "B"
    when (+>) "C"
    should be ("A" +> "B" +> "C")
    shouldn't be (& "A" +> "B")

test22 = 
  test "Or"
  given (Left 12)
    when fromEither
    should be (Fst 12)
    when isFst
    should be true
  given (Right "foo")
    when fromEither
    should be (Snd "foo")
    when isSnd
    should be true
  given (Both 'a' 'b')
    when isBoth
    should be true
  given (Both 1 2)
    when fromBoth1
    should be 1
  given (Both 1 2)
    when fromBoth2
    should be 2
  given (Both 1 2)
    after orElse id id (+)
    should be 3
  given (Fst 1)
    after orElse id id (+)
    should be 1
  given (Fst 1)
    when fromFst
    should be 1
  given (Snd 2)
    when fromSnd
    should be 2

test23 = 
  test "Ranges"
  given [1..3]
    when length
    should be 3
  given [1..3]
    when tail
    should be [2,3]
  given [1,3..12]
    should be [1,3,5,7,9,11]
  given [5,4..0]
    should be [5,4,3,2,1,0]
  given [1..]
    after take 4
    should be [1,2,3,4]
  given [5,10..]
    after take 4
    should be [5,10,15,20]
  given [10,5..]
    after take 3
    should be [10,5,0]
  given [(1,10)..(5,15)]
    after take 3
    should be [(1,10),(2,11),(3,12)]
  given [(10,20),(40,200)..]
    after take 3
    should be [(10,20),(40,200),(70,380)]
  given [5,10..11]
    should be [5,10]
  given [EQ..]
    should be [EQ,LT,GT]
  given [EQ,GT..]
    should be [EQ,GT]
  given ['a'..'e']
    should be ['a','b','c','d','e']
  given ['a','d'..]
    after take 5
    should be ['a','d','g','j','m']

test24 = 
  test "Comprehensions"
  given [x \\ x <- [1..10] | even x]
    should be [2,4,6,8,10]
  given [x \\ x <- [1..10] | even x && x > 4]
    should be [6,8,10]
  given [x \\ x <- [1..5] | x > 2]
    should be [3,4,5]
  given [y \\ x::y::_ <- [[1,2],[2,4],[3,6],[4,8]] | even x]
    should be [4,8]
  given [(x,y) \\ x <- [1,2,3], y <- [11,12,13] | even (x+y)]
    should be [(1,11),(1,13),(2,12),(3,11),(3,13)]
  given [{id=x.id,y=y} \\ x <- [{id=1},{id=2}], y <- [1..10] | x.id == y]
    should be [{id=1,y=1},{id=2,y=2}]
  given [(x,y,z) \\ x <- [1..6], y <- [x..6], z <- [y..6] | x**2 + y**2 == z**2]
    when head
    should be (3,4,5)
  given [char.upper x \\ x <- ['a'..'d']]
    should be ['A','B','C','D']