listSimple {eq} =
    eq (length li) 5
  `seq` eq (li:0) 2
  `seq` eq (li:4) 10
  where li = [x \\ x <- [1..10] | x % 2 == 0] 

listSimple2 {eq} = 
    eq (length li) 3
  `seq` eq (li:0) 6
  `seq` eq (li:2) 10
  where li = [x \\ x <- [1..10] | x % 2 == 0 && x > 4]

listSelect1 {eq} =
    eq (length li) 2
  `seq` eq (li:0) 12
  `seq` eq (li:1) 16
  where li = [x * 2 \\ x <- [1..10] | x % 2 == 0 && x > 4 && x < 10] 

listSelect2 {eq} =
    eq (length lst1) 3
  `seq` eq (lst1:0) 3
  `seq` eq (lst1:1) 4
  `seq` eq (length lst2) 2
  `seq` eq (lst2:0) 3
  where lst1 = [x \\ x <- [1..5] | x > 2]
        lst2 = [x \\ x <- [1..5] | x > 2 && x < 5]

listSelect3 {eq} =
    eq (length li) 4
  `seq` eq (li:0) 2
  `seq` eq (li:3) 8
  where li = [y \\ (x::y::[]) <- [[1,2],[3,4],[5,6],[7,8]] | y % 2 == 0]

listMultiple1 {eq} =
    eq (length li) 50
  `seq` eq (li:0) (1,11)
  `seq` eq (li:10) (3,11)
  `seq` eq (li:49) (10,20)
  where li = [(x,y) \\ x <- [1..10], y <- [11..20] | (x + y) % 2 == 0]

listMultiple2 {eq} =
    eq (length li) 2
  `seq` eq (li:0) {id=1,n='a',y=1}
  `seq` eq (li:1) {id=2,n='b',y=2}
  where li = [{id=x.id,n=x.n,y=y} \\ x <- [{id=1,n='a'},{id=2,n='b'}], y <- [1..10] | x.id == y]

listLazy1 {eqt} =
  eqt (match li with 2::4::6::xs = true; _ = false;;)
  where li = [& x \\ x <- [1..] | x % 2 == 0]

listLazy2 {eqt} =
  eqt (match li with (1,499)::(1,498)::(1,497)::xs = true; _ = false;;)
  where li = [& (x,y) \\ x <- [1..], y <- [1000,999..] | y < 500]

compOperator {eqt} =
  eqt (lst == [2,4,6,8,10])
  where lst = [x \\ x <- [1..10] | x % 2 == 0]

triangles {eq,eqt} =
  eqt (head triangles is Tuple)
  `seq` eq ((head triangles):0) 6
  `seq` eq ((head triangles):1) 8
  `seq` eq ((head triangles):2) 10
  where head (x::xs) = x
        triangles = [(a,b,c) \\ c <- [1..10], b <- [1..c], a <- [1..b] |
                      a**2 + b**2 == c**2 && a+b+c == 24]

pythTriples {eq} =
  eq (pyth 12) [(3,4,5),(6,8,10)]
  where pyth n = [(x,y,z) \\ x <- [1..n], y <- [x..n], z <- [y..n] | x**2 + y**2 == z**2]

pythTriplesLazy {eq} =
  eq (pyth 12) [(3,4,5),(6,8,10)]
  where pyth n = [& (x,y,z) \\ x <- [1..n], y <- [x..n], z <- [y..n] | x**2 + y**2 == z**2]
