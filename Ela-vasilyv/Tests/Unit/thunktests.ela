simple {eq,eqt} =
    eq (t + 2) 6
  `seq` eq t 4
  `seq` eqt (t == 4)
  where t = (& 2 + 2)
     
lazyList {eqt} =
  eqt (match lst with 0::1::xs = true; _ = false;;)
  where make n = n :: (& make (n + 1))
        lst = make 0
           
lazyList2 {eqt} =
  (eqt <| (match xs with 1::2::3::_ = true; _ = false;;))
  `seq` (eqt <| (match xs with 1::2::3::1::2::3::_ = true; _ = false;;))
  where cycle xs = xs ++ (& cycle xs)
        xs = cycle [1,2,3]

fixPoint {eq} =
  let fix' f = f (& fix' f) in
  let factabs fact 0 = 1
      factabs fact x = x * fact (x - 1) in
  let res = (fix' factabs) 5 in
  eq res 120

typeCheck {eqt} =
    eqt (t is Int)
  `seq` eqt (t2 is Int)
  where t = (& 2 * 2) + 0
        t2 = & 2

lazyEquals {eqt} =
    eqt (thunk1 == 4)
  `seq` eqt (thunk1 <> 5)
  `seq` eqt (thunk2 == 5)
  `seq` eqt (thunk2 <> 4)
  where thunk1 = (& 2 + 2)
        thunk2 = (& add 2 3)
             where add x y = x + y

lazyCompare {eqt,eqf} =
    eqt (thunk1 > 3)
  `seq` eqf (thunk1 > 4)
  `seq` eqt (thunk1 <= 4)
  `seq` eqt (thunk2 >= 5)
  `seq` eqf (thunk2 > 6)
  `seq` eqt (thunk2 < 6)
  where thunk1 = (& 2 + 2)
        thunk2 = (& add 2 3)
             where add x y = x + y

lazyMath {eq,neq} =
    eq (thunk1 + 2) 6
  `seq` eq (thunk1 - 2) 2
  `seq` eq (thunk1 * 3) 12
  `seq` eq (thunk1 / 2) 2
  `seq` eq (thunk1 ** 2) 16
  `seq` eq (thunk1 % 3) 1
  `seq` eq (thunk2 + 2) 7
  `seq` eq (thunk2 - 2) 3
  `seq` eq (thunk2 * 3) 15
  `seq` neq (thunk2 / 2) 2
  `seq` eq (thunk2 ** 2) 25
  `seq` eq (thunk2 % 2) 1
  where thunk1 = (& 2 + 2)
        thunk2 = (& add 2 3)
             where add x y = x + y

lazyBits {eq} = 
    eq ((& 2) ||| (& 12)) 14
  `seq` eq ((& 2) &&& (& 12)) 0
  `seq` eq ((& 2) ^^^ (& 12)) 14
  `seq` eq ( (& (& 128) <<< (& 8)) ||| (& 4) ) 32772
  `seq` eq (& (& 32772) >>> (& 8)) 128 

lazyElem {eq} =
    eq ( fst (& (1,2)) ) 1
  `seq` eq ( fst (& ((&12),2)) ) 12
  `seq` eq ( snd (& (2,3)) ) 3
  `seq` eq ( snd (& ((&2),(&3))) ) 3

lazyConcat {eq} =
    eq ((show <| force thunk1) ++ "str") "4str"
  `seq` eq ((show <| force thunk2) ++ "str") "5str"
  where thunk1 = (& 2 + 2)
        thunk2 = (& add 2 3)
             where add x y = x + y

lazyConcat2 {eq} =
    eq ( (& 'c') ++ (& 'a') ) "ca"
  `seq` eq ('c' ++ (& 'a') ) "ca"
  `seq` eq ( (&'c') ++ 'a' ) "ca"

lazyBool {eqt} =
  (eqt <| not (thunk1 == 5))
  `seq` (eqt <| not (thunk2 == 4))
  where thunk1 = (& 2 + 2)
        thunk2 = (& add 2 3)
             where add x y = x + y

lazyFunc {eq} =
    eq (lf 2 3) 5
  `seq` eq (lf2 3) -3
  where lf = (& \x y -> x + y)
        lf2 = (& \x -> negate x)

lazyRecord {eq} =
  eq obj.x 1
  where obj = (& {x=1,y=2})

lazySuccPred {eq} = 
    eq (succ thunk1) 5
  `seq` eq (pred thunk2) 4
  where thunk1 = (& 2 + 2)
        thunk2 = (& add 2 3)
             where add x y = x + y

lazyUnary {eq} = 
    eq (~~~thunk1) -3
  `seq` eq (negate thunk2) -5
  where thunk1 = (& 1+1)
        thunk2 = (& add 2 3)
             where add x y = x + y

lazyCall {eq} =
  eq (2 `f` 3) 5
  where f = (& \x y -> x + y)

lazyTailCall {eq} = 
  eq x 4
  where fake f = f 2
        x = fake (& \x -> x * 2)

lazyEq {eq} =
  eq x 1
  where x = if (& 2 == 2) then 1 else 0 

tupex {eq} = 
  eq (fun val) 3
  where fun (x,y) = x+y
        val = (& (1,2))

tupleEq1 {eqt,eqf} = 
    eqt (tup1 <> tup2)
  `seq` eqf (tup3 <> tup4)
  `seq` eqt (tup5 <> tup3)
  where tup1 = (& (1,2,3) )
        tup2 = (& (3,4,5) )
        tup3 = (1,2,3)
        tup4 = (& (1,2,3) )
        tup5 = (& (3,4,5) )

tupleEq2 {eqt,eqf} = 
    eqf (tup1 == tup2)
  `seq` eqt (tup3 == tup4)
  `seq` eqf (tup5 == tup3)
  where tup1 = (& (1,2,3) )
        tup2 = (& (3,4,5) )
        tup3 = (1,2,3)
        tup4 = (& (1,2,3) )
        tup5 = (& (3,4,5) )
           
tupleAdd {eq} = 
    eq (tup1 + tup2) (4,6,8)
  `seq` eq (tup3 + tup4) (2,4,6)
  `seq` eq (tup5 + tup3) (4,6,8)
  where tup1 = (& (1,2,3) )
        tup2 = (& (3,4,5) )
        tup3 = (1,2,3)
        tup4 = (& (1,2,3) )
        tup5 = (& (3,4,5) )

tupleSub {eq} = 
    eq (tup1 - tup2) (-2,-2,-2)
  `seq` eq (tup3 - tup4) (0,0,0)
  `seq` eq (tup5 - tup3) (2,2,2)
  where tup1 = (& (1,2,3) )
        tup2 = (& (3,4,5) )
        tup3 = (1,2,3)
        tup4 = (& (1,2,3) )
        tup5 = (& (3,4,5) )

tupleGt {eqt,eqf} = 
    eqf (tup1 > tup2)
  `seq` eqf (tup3 > tup4)
  `seq` eqt (tup5 > tup3)
  where tup1 = (& (1,2,3) )
        tup2 = (& (3,4,5) )
        tup3 = (1,2,3)
        tup4 = (& (1,2,3) )
        tup5 = (& (3,4,5) )

tupleLt {eqt,eqf} = 
    eqt (tup1 < tup2)
  `seq` eqf (tup3 < tup4)
  `seq` eqf (tup5 < tup3)
  where tup1 = (& (1,2,3) )
        tup2 = (& (3,4,5) )
        tup3 = (1,2,3)
        tup4 = (& (1,2,3) )
        tup5 = (& (3,4,5) )

tupleConcat {eq} = 
    eq (tup1 ++ tup2) (1,2,3,3,4,5)
  `seq` eq (tup3 ++ tup4) (1,2,3,1,2,3)
  `seq` eq (tup5 ++ tup3) (3,4,5,1,2,3)
  where tup1 = (& (1,2,3) )
        tup2 = (& (3,4,5) )
        tup3 = (1,2,3)
        tup4 = (& (1,2,3) )
        tup5 = (& (3,4,5) )

thunkFun {eq} = 
    eq ((& +) 2 2) 4
  `seq` eq ((& add) 2 2) 4
  where add x y = x + y

thunkBoolEq {eqt} = 
    eqt (true == (& true))
  `seq` eqt ((& true) == true)

thunkListEq {eqt} = 
    eqt ([1,2,3] == (& [1,2,3]))
  `seq` eqt ((& [1,2,3]) == [1,2,3])
  `seq` eqt ([& x \\ x <- [1..3]] == [1,2,3])
  `seq` eqt ([1,2,3] == [& x \\ x <- [1..3]])
