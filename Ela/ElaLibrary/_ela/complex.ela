/* 
  Module complex
  Created in 2016 by Basil Voronkov
*/
open generic number unsafe.console
import libComplex#elalib@cp

/* Type */
type Complex = !a :+ !b
  deriving Eq Show

/* Core functions */
magnitude (x :+ y) = cp.magnitude x y

phase (x :+ y) = cp.phase x y

realPart (x :+ _) = x

imagPart (_ :+ y) = y

conjugate (x :+ y) = x :+ negate y

mkPolar r theta = r * cos theta :+ r * sin theta

cis theta = cos theta :+ sin theta

polar z = (magnitude z, phase z)

/* Instances */
instance Additive Complex where
  (x :+ y) + (x' :+ y') = (x+x') :+ (y+y')
  (x :+ y) - (x' :+ y') = (x-x') :+ (y-y')
  negate (x :+ y) =  negate x :+ negate y

instance Field Complex where
  (x :+ y) / (x' :+ y') = a :+ b
    where (a,b) = cp.divide x y x' y'

instance Ring Complex where
  (x :+ y) * (x' :+ y') = (x*x' - y*y') :+ (x*y' + y*x')
  x ** y = 
    match (x, y) with
      (_ , 0 :+ 0) = 1d :+ 0d
      (0 :+ 0, exp_re :+ _) =
        match compare exp_re 0 with
          GT = 0d :+ 0d
          LT = infV :+ 0d
          EQ = nanV :+ nanV
      (re :+ im, exp_re :+ _)
        | inf re || inf im =
          match compare exp_re 0 with
            GT = infV :+ 0d
            LT = 0d :+ 0d
            EQ = nanV :+ nanV
        | else = exp (log x * y)
    where
      infV = 1d / 0d
      nanV = 0d / 0d

instance Transcendental Complex where
  e               = e ::: Double :+ 0
  pi              = pi ::: Double :+ 0
  sqrt (0 :+ 0)   = 0d
  sqrt (x :+ y)@z = u :+ (if y < 0 then -v else v)
                    where (u,v) = if x < 0 then (v',u') else (u',v')
                          v'    = abs y / (u'*2)
                          u'    = sqrt ((magnitude z + abs x) / 2)
  exp (x :+ y)    = (expx * cos y) :+ (expx * sin y)
                    where expx = exp x
  log z           = log (magnitude z) :+ phase z
  sin (x :+ y)    = sin x * cosh y :+ cos x * sinh y
  cos (x :+ y)    = cos x * cosh y :+ (negate $ sin x * sinh y)
  tan (x :+ y)    = (sinx*coshy :+ cosx*sinhy) / (cosx*coshy :+ (negate $ sinx*sinhy))
                    where sinx  = sin x
                          cosx  = cos x
                          sinhy = sinh y
                          coshy = cosh y
  sinh (x :+ y)   = cos y * sinh x :+ sin  y * cosh x
  cosh (x :+ y)   = cos y * cosh x :+ sin y * sinh x
  tanh (x :+ y)   = (cosy*sinhx :+ siny*coshx) / (cosy*coshx :+ siny*sinhx)
                    where siny  = sin y
                          cosy  = cos y
                          sinhx = sinh x
                          coshx = cosh x
  asin (x :+ y)@z = y':+ (negate x')
                    where  (x' :+ y') = log (((negate y) :+ x) + sqrt (1 - z*z))
  acos z          = y'' :+ (negate x'')
                    where (x'' :+ y'') = log (z + ((negate y') :+ x'))
                          (x' :+ y') = sqrt (1 - z*z)
  atan (x :+ y)@z = y' :+ (negate x')
                    where (x' :+ y') = log (((1 - y) :+ x) / sqrt (1 + z*z))
  asinh z         =  log (z + sqrt (1 + z*z))
  acosh z         =  log (z + (z+1) * sqrt ((z - 1)/(z+1)))
  atanh z         =  0.5d * log ((1.0d + z) / (1.0d - z))
  logBase a x     = log x / log a

instance Num Complex where
  zero = 0d :+ 0d
  one  = 1d :+ 0d
  (~=) = (==)

instance Numeral Complex where
  numeral s = gread s :+ 0d

instance Absolute Complex where
  abs z             = magnitude z :+ 0
  signum (0 :+ 0)   = 0
  signum (x :+ y)@z = (x / r) :+ (y / r)
                      where r = magnitude z

instance IntLike Complex where
  fromInt n = toDouble n :+ 0d

instance LongLike Complex where
  fromLong n = toDouble n :+ 0d
