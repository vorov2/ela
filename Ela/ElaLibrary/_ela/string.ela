/* 
  Module string
  Created in 2012 by Basil Voronkov
*/
import libString#elalib@str
import lang

/* Classes and instances */
class Format a where
  fmt _->a->_

instance Format Int Long Single Double String Char Bool where
  fmt f x = lang.toString (force f) x

instance ListLike String where 
  toList x    = str.toList x
  fromList xs = toString <| trav "" xs
    where trav sb (x::xs) = trav (sb +> toString x) xs
          trav sb [] = sb

/* Functions */
format = formatfn id

formatfn fn !fstr = format fn fstr [] (str.countArgs fstr)
  where
    format fn fstr xs n 
      | n == 0 = fn <| str.format fstr fmt xs
      | else = \x -> format fn fstr (force x::xs) (n - 1)

upper # qualified
upper x = str.upper (force x)

lower # qualified
lower x = str.lower (force x)

trim x = str.trim (force x)
trimChars = collect str.trimChars []
trimStart s = str.trimStart (force s)
trimStartChars = collect str.trimStartChars []
trimEnd s = str.trimEnd (force s)
trimEndChars = collect str.trimEndChars []

indexOf search s = str.indexOf (force search) (force s)
indexOfFrom search idx s = str.indexOfFrom (force search) (force idx) (force s)
indexOfLast search s = str.indexOfLast (force search) (force s)

startsWith search s = str.startsWith (force search) (force s)
endsWith search s = str.endsWith (force search) (force s)

replace search repl s = str.replace (force search) (force repl) (force s)

remove start n s = str.remove (force start) (force n) (force s)

substr start n s = str.substr (force start) (force n) (force s)

split sep s = str.split (force sep) (force s)

insert idx ins s = str.insert (force idx) (force ins) (force s)

//This function is used to collect chars in a list
collect # private
collect fn xs x 
  | x is Char = collect fn (x::xs)
  | else = fn xs x
