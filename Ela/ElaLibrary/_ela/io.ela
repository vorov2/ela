/* 
  Module io
  Created in 2013-2015 by Basil Voronkov
*/
open monad generic unsafe.console unsafe.file libIO#elalib@unsafeIO

//Type and instances
type IO = IO a # private

instance Pointed IO where
  point x = IO x

instance Union IO where
  join (IO a) 
    | a is IO = mkIO $ execIO a
    | else = fail "Union IO.join: Expected IO."

instance Functor IO where
  fmap f x = mkIO (f $ execIO x)

instance Show IO where
  show _ = "IO"

execIO (IO a)
  | a is Fun  = a ()
  | else      = a

mkIO a = IO a

//Console IO
putStr s = mkIO (\_ -> write s)

putStrLn s = putStr (s ++ "\r\n")

readStr = mkIO (\_ -> readn ())

readAny = mkIO (\_ -> gread $ readn())

//File IO
type FileMode = AppendMode | CreateMode | OpenMode | OpenCreateMode | TruncateMode
type FileAccessMode = ReadMode | WriteMode | ReadWriteMode
type FileStream = FileStream a # private

openFile fn mode acc = mkIO (\_ -> FileStream $ unsafeIO.openFile fn ms as)
  where ms = consName mode
        as = consName acc

readFile fn mode = openFile fn mode ReadMode

writeFile fn mode = openFile fn mode WriteMode

closeFile (FileStream f) = mkIO (\_-> unsafeIO.closeFile f)

//Reading
readLine (FileStream f) = mkIO (\_ -> unsafeIO.readLine f)

//Writing
writeStr str (FileStream f) = mkIO (\_ -> unsafeIO.writeString str f)
