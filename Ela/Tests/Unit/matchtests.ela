open core

literalMatch {eqt} = 
    eqt (match 1 with 1 = true; _ = false;;)
  `seq` eqt (match 124 with 124 = true; _ = false;;)
  `seq` eqt (match 240L with 240L = true; _ = false;;)
  `seq` eqt (match 42.42 with 42.42 = true; _ = false;;)
  `seq` eqt (match 412.42D with 412.42D = true; _ = false;;)
  `seq` eqt (match 'c' with 'c' = true; _ = false;;)
  `seq` eqt (match "Hello" with "Hello" = true; _ = false;;)
  `seq` eqt (match true with true = true; _ = false;;)
  `seq` eqt (match false with false = true; _ = false;;)

varMatch {eqt} = 
    eqt (match 42 with x = x == 42;;)
  `seq` eqt (match 'H' with y = y == 'H';;)

listMatch {eqt} =
    eqt (match lst with x::xs = true; _ = false;;)
  `seq` eqt (match lst with 1::xs = true; _ = false;;)
  `seq` eqt (match lst with 1::2::3::xs = true; _ = false;;)
  `seq` eqt (match lst with 1::y::3::xs = y == 2; _ = false;;)
  `seq` eqt (match lst with 1::2::3::[] = false; _ = true;;)
  `seq` eqt (match lst with x::y::z::xs = x == 1 && y == 2 && z == 3; _ = true;;)
  where lst = [1,2,3,4,5]

listMatch2 {eqt} =
    eqt (match lst with [1,2,3] = false; _ = true;;)
  `seq` eqt (match lst with [1,2,3,4,5] = true; _ = false;;)
  `seq` eqt (match lst with [x,y,z,4,5] = x == 1 && y == 2 && z == 3; _ = false;;)
  where lst = [1,2,3,4,5]

tupleMatch {eqt} =
    eqt (match tup with (1,2,3) = true; _ = false;;)
  `seq` eqt (match tup with (1,2) = false; _ = true;;)
  `seq` eqt (match tup with (x,y,z) = x == 1 && y == 2 && z == 3; _ = false;;)
  where tup = (1,2,3)

recordMatch {eqt} =
    eqt (match rec with (1,2,3) = true; _ = false;;)
  `seq` eqt (match rec with {x=1,z=3,y=2} = true; _ = false;;)
  `seq` eqt (match rec with {x=1,y=2} = true; _ = false;;)
  `seq` eqt (match rec with {x,y,z} = x == 1 && y == 2 && z == 3; _ = false;;)
  where rec = {x=1,y=2,z=3}

unitMatch {eqt} =
    eqt (match () with () = true; _ = false;;)
  `seq` eqt (match 123 with () = false; _ = true;;)

variantMatch {eqt} =
    eqt (match s with Some = true; _ = false;;)
  `seq` eqt (match s with Some 12 = true; _ = false;;)
  `seq` eqt (match s with Some x = x == 12; _ = false;;)
  `seq` eqt (match s2 with Some = true; _ = false;;)
  `seq` eqt (match s2 with Some (1,2,3) = true; _ = false;;)
  `seq` eqt (match s2 with Some x = x == (1,2,3); _ = false;;)
  `seq` eqt (match n with None = true; _ = false;;)
  where s  = Some 12
        s2 = Some (1,2,3)
        n  = None

asMatch {eqt} =
  eqt (match 4 with 4@n = n == 4; _ = false;;)
  `seq` eqt (match (1,2) with (1,2)@t = t == (1,2); _ = false;;)

guards {eqt} =
  eqt v
  where v = match (1,4,3) with
                  (x,y,z) | x > z = false
                          | z > x && x + z == y = true
                          | else = false

guards2 {eqt} =
  eqt v
  where v = match (10,10) with
                  (x,y) | x > y = false
                        | x < y = false
                        | else  = true

guards3 {eqt} =
  eqt v
  where v = match (10,2) with
                  (x,y) | r > 8 = false
                        | r < 8 = false
                        | else  = true
                        where r = x - y 

guards4 {eqt} = eqt v
  where v = match "ela" with
                  (x::xs)@str | x == 'E' = false
                              | x == 'L' = false
                              | else     = str == "ela"
                  "ELA"            = false

guards6 {eqt} =
  (eqt <| (compare 100 12) == LT)
  `seq` (eqt <| (compare 12 100) == GT)
  `seq` (eqt <| (compare 13 13) == EQ)
  where compare x y | y >  x = GT
                    | y == x = EQ
                    | else   = LT 

parallel {eqt} = eqt v
  where v = match (1,2,3) with
                  (x,y,z) = x + y + z == 6
                  _       = false

parallel2 {eqt} = eqt v
  where v = match (1,) with
                  (x,) = x == 1
                  _    = false

firstSecond {eq} =
  eq (fst (2, 3)) 2 `seq` eq (snd (3, 4)) 4
  where fst (x,_) = x
     et snd (_,y) = y

nestedMatch {eqt} = 
  eqt res
      where xs = [[1,2],[3,4]]
            res = match xs with
                        x::xs = match x with [1,2] = true; _ = false
                        []    = false

tupleMatch2 {eq,eqt} =
  match t with
        (x,y)   = eqt false
        (x,y,z) = eq (x+y+z) 6
  where t = (1,2,3)
